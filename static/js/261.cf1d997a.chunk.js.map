{"version":3,"file":"static/js/261.cf1d997a.chunk.js","mappings":"ySAKMA,E,QAAgBC,EAAAA,OAAa,CACjCC,QAHY,+BAIZC,OAAQ,CACNC,QANY,sCAWHC,EAAmB,mCAAG,6GAERL,EAAcM,IAAd,kBAFQ,cAEzBC,EAFyB,yBAGxBA,EAASC,MAHe,oGAAH,qDAUnBC,EAAY,mCAAG,WAAOC,GAAP,gGAEDV,EAAcM,IAAd,gBAAmC,CACxDH,OAAQ,CACNQ,MAAOD,KAJa,cAElBH,EAFkB,yBAOjBA,EAASC,MAPQ,oGAAH,sDAcZI,EAAe,mCAAG,WAAOC,GAAP,gGAEJb,EAAcM,IAAd,iBAA4BO,IAFxB,cAErBN,EAFqB,yBAGpBA,EAASC,MAHW,oGAAH,sDAUfM,EAAY,mCAAG,WAAOC,GAAP,gGAEDf,EAAcM,IAAd,iBAA4BS,EAA5B,aAFC,cAElBR,EAFkB,yBAGjBA,EAASC,MAHQ,oGAAH,sDAWZQ,EAAe,mCAAG,WAAOC,GAAP,gGAEJjB,EAAcM,IAAd,iBAA4BW,EAA5B,aAFI,cAErBV,EAFqB,yBAGpBA,EAASC,MAHW,oGAAH,qD,yHCqB5B,UA3EA,WACE,IAAQK,GAAYK,EAAAA,EAAAA,MAAZL,QACR,GAAwCM,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAwBF,EAAAA,EAAAA,UAAS,IAAjC,eAAOJ,EAAP,KAAaO,EAAb,KACA,GAA8BH,EAAAA,EAAAA,UAAS,IAAvC,eAAOF,EAAP,KAAgBM,EAAhB,KAEMC,GAAWC,EAAAA,EAAAA,MA4BjB,OAxBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,kHAE2Bd,EAAAA,EAAAA,IAAgBC,GAF3C,cAEUN,EAFV,OAGIc,EAAgBd,GAHpB,UAK+BO,EAAAA,EAAAA,IAAaD,GAL5C,cAKUc,EALV,OAMIL,EAAQK,EAAaZ,MANzB,WAQkCC,EAAAA,EAAAA,IAAgBH,GARlD,QAQUe,EARV,OASIL,EAAWK,EAAgBC,SAT/B,kDAWIC,QAAQC,MAAM,iCAAd,MAXJ,2DADc,uBAAC,WAAD,wBAgBdC,EACD,GAAE,CAACnB,KAQF,4BACK,oBAAQoB,UAAU,iBAAiBC,QAPrB,WACnBV,GAAU,EACX,EAKM,WACC,iBAAMS,UAAU,aAAhB,oBADD,cAGFb,IACC,iBAAKa,UAAU,0BAAf,WACE,wBAAKb,EAAae,SAClB,iBAAKF,UAAU,gBAAf,WACA,gBACEG,IAAKhB,EAAaiB,YAAb,0CAA8DjB,EAAaiB,aApCvE,8EAqCTC,IAAI,SACJL,UAAU,eACVM,MAAO,CAAEC,SAAU,YAErB,kBAAMP,UAAU,aAAhB,WACA,0BAAG,cAAGA,UAAU,aAAb,sBAAuCb,EAAaqB,iBACvD,0BAAG,cAAGR,UAAU,WAAb,wBAAuCb,EAAasB,aACvD,0BAAG,cAAGT,UAAU,SAAb,sBAAmCb,EAAauB,OAAOC,KAAI,SAACC,GAAD,OAAWA,EAAMC,IAAjB,IAAuBC,KAAK,mBAM9F,4BACE,oDACA,gBAAId,UAAU,OAAd,WACE,yBACE,SAAC,KAAD,CAAMe,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,8BAKN,SAAC,KAAD,CAAQjC,KAAMA,EAAME,QAASA,MAGlC,C","sources":["components/API.js","components/pages/MovieDetails.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '9a4b9e4760b7564e10a80d0c72f50665'; \nconst BASE_URL = `https://api.themoviedb.org/3`;\n\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n  },\n});\n\n// Function to fetch trending movies\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await axiosInstance.get(`/movie/popular`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Function to search for movies by keyword\nexport const searchMovies = async (keyword) => {\n  try {\n    const response = await axiosInstance.get(`/search/movie`, {\n      params: {\n        query: keyword,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Function to get full movie details\nexport const getMovieDetails = async (movieId) => {\n  try {\n    const response = await axiosInstance.get(`/movie/${movieId}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Function to get cast information for a movie\nexport const getMovieCast = async (cast) => {\n  try {\n    const response = await axiosInstance.get(`/movie/${cast}/credits`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n\n// Function to get movie reviews\nexport const getMovieReviews = async (reviews) => {\n  try {\n    const response = await axiosInstance.get(`/movie/${reviews}/reviews`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};","import React, { useEffect, useState } from 'react';\nimport { getMovieDetails, getMovieCast, getMovieReviews } from '../API';\nimport { useParams, Link, Outlet, useNavigate } from 'react-router-dom';\n\nfunction MovieDetails() {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [cast, setCast] = useState([]);\n  const [reviews, setReviews] = useState([]);\n\n  const navigate = useNavigate();\n\n  const defaultImg = 'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\n  useEffect(() => {\n    async function fetchMovie() {\n      try {\n        const response = await getMovieDetails(movieId);\n        setMovieDetails(response);\n\n        const castResponse = await getMovieCast(movieId);\n        setCast(castResponse.cast);\n\n        const reviewsResponse = await getMovieReviews(movieId);\n        setReviews(reviewsResponse.results);\n      } catch (error) {\n        console.error('Error fetching movie details: ', error);\n      }\n    }\n\n    fetchMovie();\n  }, [movieId]);\n\n  const handleGoBack = () => {\n    navigate(-1);\n  };\n\n\n  return (\n    <div>\n         <button className=\"go-back-button\" onClick={handleGoBack}>\n          <span className=\"arrow-icon\">‚Üê</span> Go back\n        </button>\n      {movieDetails && (\n        <div className=\"movie-details-container\">\n          <h2>{movieDetails.title}</h2>\n          <div className=\"movie-details\">\n          <img\n            src={movieDetails.poster_path ? `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}` : defaultImg}\n            alt=\"poster\"\n            className=\"movie-poster\"\n            style={{ maxWidth: '250px' }}\n          />\n          <span className=\"movie-info\">\n          <p><b className=\"user-score\">Rating: </b>{movieDetails.vote_average}</p>\n          <p><b className=\"overview\">Overview: </b>{movieDetails.overview}</p>\n          <p><b className=\"genres\">Genres: </b>{movieDetails.genres.map((genre) => genre.name).join(', ')}</p>\n          </span>\n          </div>\n        </div>\n      )}\n\n      <div>\n        <h2>Additional Information</h2>\n        <ul className=\"list\">\n          <li>\n            <Link to=\"cast\">Cast</Link>\n          </li>\n          <li>\n            <Link to=\"reviews\">Reviews</Link>\n          </li>\n        </ul>\n      </div>\n\n      <Outlet cast={cast} reviews={reviews} />\n    </div>\n  );\n}\n\nexport default MovieDetails;"],"names":["axiosInstance","axios","baseURL","params","api_key","fetchTrendingMovies","get","response","data","searchMovies","keyword","query","getMovieDetails","movieId","getMovieCast","cast","getMovieReviews","reviews","useParams","useState","movieDetails","setMovieDetails","setCast","setReviews","navigate","useNavigate","useEffect","castResponse","reviewsResponse","results","console","error","fetchMovie","className","onClick","title","src","poster_path","alt","style","maxWidth","vote_average","overview","genres","map","genre","name","join","to"],"sourceRoot":""}