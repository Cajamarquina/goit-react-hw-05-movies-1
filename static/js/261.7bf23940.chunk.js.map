{"version":3,"file":"static/js/261.7bf23940.chunk.js","mappings":"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","sources":["components/API.js","components/pages/MovieDetails.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '9a4b9e4760b7564e10a80d0c72f50665'; \nconst BASE_URL = `https://api.themoviedb.org/3`;\n\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n  },\n});\n\n// Function to fetch trending movies\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await axiosInstance.get(`/movie/popular`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Function to search for movies by keyword\nexport const searchMovies = async (keyword) => {\n  try {\n    const response = await axiosInstance.get(`/search/movie`, {\n      params: {\n        query: keyword,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Function to get full movie details\nexport const getMovieDetails = async (movieId) => {\n  try {\n    const response = await axiosInstance.get(`/movie/${movieId}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Function to get cast information for a movie\nexport const getMovieCast = async (cast) => {\n  try {\n    const response = await axiosInstance.get(`/movie/${cast}/credits`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n\n// Function to get movie reviews\nexport const getMovieReviews = async (reviews) => {\n  try {\n    const response = await axiosInstance.get(`/movie/${reviews}/reviews`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};","import React, { useEffect, useState, useRef } from 'react';\nimport { getMovieDetails, getMovieCast, getMovieReviews } from '../API';\nimport { useParams, Link, Outlet, useNavigate } from 'react-router-dom';\n\nexport function GoBackBtn() {\n  const navigate = useNavigate();\n  const previousPageRef = useRef();\n\n  const handleGoBack = () => {\n    const previousPage = previousPageRef.current;\n    if (previousPage === '/home' || previousPage === '/movies') {\n      navigate(previousPage);\n    }\n  };\n\n  useEffect(() => {\n    previousPageRef.current = document.referrer;\n  }, []);\n\n  return (\n    <button className=\"go-back-button\" onClick={handleGoBack}>\n      <span className=\"arrow-icon\">‚Üê</span> Go back\n    </button>\n  );\n}\n\nfunction MovieDetails() {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [cast, setCast] = useState([]);\n  const [reviews, setReviews] = useState([]);\n  const [castVisible, setCastVisible] = useState(false);\n  const [reviewsVisible, setReviewsVisible] = useState(false);\n\n  const defaultImg = 'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\n  useEffect(() => {\n    async function fetchMovie() {\n      try {\n        const response = await getMovieDetails(movieId);\n        setMovieDetails(response);\n\n        const castResponse = await getMovieCast(movieId);\n        setCast(castResponse.cast);\n\n        const reviewsResponse = await getMovieReviews(movieId);\n        setReviews(reviewsResponse.results);\n      } catch (error) {\n        console.error('Error fetching movie details: ', error);\n      }\n    }\n\n    fetchMovie();\n  }, [movieId]);\n\n  return (\n    <div>\n      <GoBackBtn />\n      {movieDetails && (\n        <div className=\"movie-details-container\">\n          <h2>{movieDetails.title}</h2>\n          <div className=\"movie-details\">\n            <img\n              src={movieDetails.poster_path ? `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}` : defaultImg}\n              alt=\"poster\"\n              className=\"movie-poster\"\n              style={{ maxWidth: '250px' }}\n            />\n            <span className=\"movie-info\">\n              <p><b className=\"user-score\">Rating: </b>{movieDetails.vote_average}</p>\n              <p><b className=\"overview\">Overview: </b>{movieDetails.overview}</p>\n              <p><b className=\"genres\">Genres: </b>{movieDetails.genres.map((genre) => genre.name).join(', ')}</p>\n            </span>\n          </div>\n        </div>\n      )}\n\n      <div>\n        <h2>Additional Information</h2>\n        <ul className=\"list\">\n          <li>\n            <Link to=\"cast\" onClick={() => setCastVisible(!castVisible)}>\n              Cast\n            </Link>\n          </li>\n          <li>\n            <Link to=\"reviews\" onClick={() => setReviewsVisible(!reviewsVisible)}>\n              Reviews\n            </Link>\n          </li>\n        </ul>\n      </div>\n\n      {castVisible && <Outlet cast={cast} />}\n      {reviewsVisible && <Outlet reviews={reviews} />}\n    </div>\n  );\n}\n\nexport default MovieDetails;\n"],"names":["axiosInstance","axios","baseURL","params","api_key","fetchTrendingMovies","get","response","data","searchMovies","keyword","query","getMovieDetails","movieId","getMovieCast","cast","getMovieReviews","reviews","GoBackBtn","navigate","useNavigate","previousPageRef","useRef","useEffect","current","document","referrer","className","onClick","previousPage","useParams","useState","movieDetails","setMovieDetails","setCast","setReviews","castVisible","setCastVisible","reviewsVisible","setReviewsVisible","castResponse","reviewsResponse","results","console","error","fetchMovie","title","src","poster_path","alt","style","maxWidth","vote_average","overview","genres","map","genre","name","join","to"],"sourceRoot":""}