{"version":3,"file":"static/js/489.f9223800.chunk.js","mappings":"ySAKMA,E,QAAgBC,EAAAA,OAAa,CACjCC,QAHY,+BAIZC,OAAQ,CACNC,QANY,sCAWHC,EAAmB,mCAAG,6GAERL,EAAcM,IAAd,kBAFQ,cAEzBC,EAFyB,yBAGxBA,EAASC,MAHe,oGAAH,qDAUnBC,EAAY,mCAAG,WAAOC,GAAP,gGAEDV,EAAcM,IAAd,gBAAmC,CACxDH,OAAQ,CACNQ,MAAOD,KAJa,cAElBH,EAFkB,yBAOjBA,EAASC,MAPQ,oGAAH,sDAcZI,EAAe,mCAAG,WAAOC,GAAP,gGAEJb,EAAcM,IAAd,iBAA4BO,IAFxB,cAErBN,EAFqB,yBAGpBA,EAASC,MAHW,oGAAH,sDAUfM,EAAY,mCAAG,WAAOC,GAAP,gGAEDf,EAAcM,IAAd,iBAA4BS,EAA5B,aAFC,cAElBR,EAFkB,yBAGjBA,EAASC,MAHQ,oGAAH,sDAWZQ,EAAe,mCAAG,WAAOC,GAAP,gGAEJjB,EAAcM,IAAd,iBAA4BW,EAA5B,aAFI,cAErBV,EAFqB,yBAGpBA,EAASC,MAHW,oGAAH,qD,gHCgC5B,UArFA,YAAuC,IAArBU,EAAoB,EAApBA,iBAChB,GAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOT,EAAP,KAAgBU,EAAhB,KACA,GAAkDD,EAAAA,EAAAA,UAAS,IAA3D,eAAOE,EAAP,KAA0BC,EAA1B,KAEMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAsBC,KAAKC,MAAMC,aAAaC,QAAQ,kBACxDJ,GACFJ,EAAqBI,GACrBR,EAAiBQ,KAEjBJ,EAAqB,IACrBJ,EAAiB,IAEpB,GAAE,CAACA,IAEJ,IAAMa,EAAY,mCAAG,8GAEMtB,EAAAA,EAAAA,IAAaC,GAFnB,OAEXH,EAFW,OAIjBsB,aAAaG,QAAQ,gBAAiBL,KAAKM,UAAU1B,EAAS2B,UAE9DZ,EAAqBf,EAAS2B,SAC9BhB,EAAiBX,EAAS2B,SAPT,gDASjBC,QAAQC,MAAM,2BAAd,MATiB,yDAAH,qDAuBlB,OACE,4BACE,2CACA,kBACEC,KAAK,OACLC,MAAO5B,EACP6B,SAAU,SAACC,GAAD,OAAOpB,EAAWoB,EAAEC,OAAOH,MAA3B,EACVI,UAjBgB,SAACF,GACP,UAAVA,EAAEG,KACJZ,GAEH,KAeG,mBAAQa,QAASb,EAAjB,oBAECV,EAAkBwB,OAAS,GAC1B,4BACE,qCACA,eAAIC,UAAU,cAAd,SACGzB,EAAkB0B,KAAI,SAACC,GAAD,OACrB,eAAIF,UAAU,aAAd,UACE,iBAAKF,QAAS,kBArBF/B,EAqByBmC,EAAMC,QApBvD1B,EAAS,WAAD,OAAYV,IADG,IAACA,CAqBE,EAAd,WACE,gBACEqC,IACEF,EAAMG,YAAN,0DACuDH,EAAMG,aA1D9D,8EA6DDC,IAAKJ,EAAMK,MACXP,UAAU,eACVQ,MAAO,CAAEC,SAAU,YAErB,cAAGT,UAAU,cAAb,SAA4BE,EAAMK,YAZNL,EAAMC,GADjB,UAoB3B,mDAIP,C","sources":["components/API.js","components/pages/Movies.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '9a4b9e4760b7564e10a80d0c72f50665'; \nconst BASE_URL = `https://api.themoviedb.org/3`;\n\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n  },\n});\n\n// Function to fetch trending movies\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await axiosInstance.get(`/movie/popular`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Function to search for movies by keyword\nexport const searchMovies = async (keyword) => {\n  try {\n    const response = await axiosInstance.get(`/search/movie`, {\n      params: {\n        query: keyword,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Function to get full movie details\nexport const getMovieDetails = async (movieId) => {\n  try {\n    const response = await axiosInstance.get(`/movie/${movieId}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Function to get cast information for a movie\nexport const getMovieCast = async (cast) => {\n  try {\n    const response = await axiosInstance.get(`/movie/${cast}/credits`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n\n// Function to get movie reviews\nexport const getMovieReviews = async (reviews) => {\n  try {\n    const response = await axiosInstance.get(`/movie/${reviews}/reviews`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { searchMovies } from '../API';\nimport { useNavigate } from 'react-router-dom';\n\nfunction Movies({ setSearchResults }) {\n  const [keyword, setKeyword] = useState('');\n  const [searchResultsData, setSearchResultsData] = useState([]);\n  const defaultImg = 'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const storedSearchResults = JSON.parse(localStorage.getItem('searchResults'));\n    if (storedSearchResults) {\n      setSearchResultsData(storedSearchResults);\n      setSearchResults(storedSearchResults);\n    } else {\n      setSearchResultsData([]);\n      setSearchResults([]);\n    }\n  }, [setSearchResults]);\n\n  const handleSearch = async () => {\n    try {\n      const response = await searchMovies(keyword);\n\n      localStorage.setItem('searchResults', JSON.stringify(response.results));\n\n      setSearchResultsData(response.results);\n      setSearchResults(response.results);\n    } catch (error) {\n      console.error('Error searching movies: ', error);\n    }\n  }\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  const handleMovieClick = (movieId) => {\n    navigate(`/movies/${movieId}`);\n  };\n\n  return (\n    <div>\n      <h1>Search Movies</h1>\n      <input\n        type=\"text\"\n        value={keyword}\n        onChange={(e) => setKeyword(e.target.value)}\n        onKeyDown={handleKeyDown}\n      />\n      <button onClick={handleSearch}>Search</button>\n\n      {searchResultsData.length > 0 ? (\n        <div>\n          <h2>Results</h2>\n          <ul className=\"movies-list\">\n            {searchResultsData.map((movie) => (\n              <li className=\"movie-item\" key={movie.id}>\n                <div onClick={() => handleMovieClick(movie.id)}>\n                  <img\n                    src={\n                      movie.poster_path\n                        ? `https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`\n                        : defaultImg\n                    }\n                    alt={movie.title}\n                    className=\"movie-poster\"\n                    style={{ maxWidth: '250px' }}\n                  />\n                  <p className=\"movie-title\">{movie.title}</p>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <p>No results were found</p>\n      )}\n    </div>\n  );\n}\n\nMovies.propTypes = {\n  setSearchResults: PropTypes.func.isRequired,\n};\n\nexport default Movies;\n"],"names":["axiosInstance","axios","baseURL","params","api_key","fetchTrendingMovies","get","response","data","searchMovies","keyword","query","getMovieDetails","movieId","getMovieCast","cast","getMovieReviews","reviews","setSearchResults","useState","setKeyword","searchResultsData","setSearchResultsData","navigate","useNavigate","useEffect","storedSearchResults","JSON","parse","localStorage","getItem","handleSearch","setItem","stringify","results","console","error","type","value","onChange","e","target","onKeyDown","key","onClick","length","className","map","movie","id","src","poster_path","alt","title","style","maxWidth"],"sourceRoot":""}