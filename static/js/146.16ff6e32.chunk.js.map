{"version":3,"file":"static/js/146.16ff6e32.chunk.js","mappings":"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","sources":["components/API.js","components/components/Cast.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '9a4b9e4760b7564e10a80d0c72f50665'; \nconst BASE_URL = `https://api.themoviedb.org/3`;\n\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n  },\n});\n\n// Function to fetch trending movies\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await axiosInstance.get(`/movie/popular`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Function to search for movies by keyword\nexport const searchMovies = async (keyword) => {\n  try {\n    const response = await axiosInstance.get(`/search/movie`, {\n      params: {\n        query: keyword,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Function to get full movie details\nexport const getMovieDetails = async (movieId) => {\n  try {\n    const response = await axiosInstance.get(`/movie/${movieId}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Function to get cast information for a movie\nexport const getMovieCast = async (cast) => {\n  try {\n    const response = await axiosInstance.get(`/movie/${cast}/credits`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n\n// Function to get movie reviews\nexport const getMovieReviews = async (reviews) => {\n  try {\n    const response = await axiosInstance.get(`/movie/${reviews}/reviews`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types'; \nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from '../API';\n\nexport async function fetchMovieCast(movieId) {\n  try {\n    const response = await getMovieCast(movieId);\n    return response.cast;\n  } catch (error) {\n    console.error('Error fetching cast information: ', error);\n    return [];\n  }\n}\n\nfunction Cast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  const defaultImg = 'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\n  useEffect(() => {\n    async function fetchCast() {\n      const castData = await fetchMovieCast(movieId);\n      setCast(castData);\n    }\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h2>Cast Information</h2>\n      <ul className=\"actor-list list\">\n        {(cast || []).map((actor) => (\n          <li className=\"actor-item\" key={actor.id}> \n            <img\n              src={actor.profile_path ? `https://image.tmdb.org/t/p/w185_and_h278_bestv2/${actor.profile_path}` : defaultImg}\n              alt={actor.name}\n              style={{ maxWidth: '250px' }}\n            />\n            <p><b>{actor.name}</b></p>\n            {actor.character && <p>as {actor.character}</p>}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nCast.propTypes = {\n  cast: PropTypes.array, \n};\n\nexport default Cast;\n"],"names":["axiosInstance","axios","baseURL","params","api_key","fetchTrendingMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","get","sent","abrupt","data","t0","stop","apply","arguments","searchMovies","_ref2","_callee2","keyword","_context2","query","_x","getMovieDetails","_ref3","_callee3","movieId","_context3","concat","_x2","getMovieCast","_ref4","_callee4","cast","_context4","_x3","getMovieReviews","_ref5","_callee5","reviews","_context5","_x4","fetchMovieCast","_fetchMovieCast","console","error","useParams","_useState","useState","_useState2","_slicedToArray","setCast","useEffect","_fetchCast","castData","fetchCast","_jsxs","children","_jsx","className","map","actor","src","profile_path","alt","name","style","maxWidth","character","id"],"sourceRoot":""}